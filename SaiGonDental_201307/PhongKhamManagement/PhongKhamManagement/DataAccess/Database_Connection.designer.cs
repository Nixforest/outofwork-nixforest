#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PhongKhamManagement.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SaiGonDental")]
	public partial class Database_ConnectionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertACADEMIC(ACADEMIC instance);
    partial void UpdateACADEMIC(ACADEMIC instance);
    partial void DeleteACADEMIC(ACADEMIC instance);
    partial void InsertWARD(WARD instance);
    partial void UpdateWARD(WARD instance);
    partial void DeleteWARD(WARD instance);
    partial void InsertBRANCH(BRANCH instance);
    partial void UpdateBRANCH(BRANCH instance);
    partial void DeleteBRANCH(BRANCH instance);
    partial void InsertCITY(CITY instance);
    partial void UpdateCITY(CITY instance);
    partial void DeleteCITY(CITY instance);
    partial void InsertCUSTOMER(CUSTOMER instance);
    partial void UpdateCUSTOMER(CUSTOMER instance);
    partial void DeleteCUSTOMER(CUSTOMER instance);
    partial void InsertDEPARTMENT(DEPARTMENT instance);
    partial void UpdateDEPARTMENT(DEPARTMENT instance);
    partial void DeleteDEPARTMENT(DEPARTMENT instance);
    partial void InsertDISEASEBEFORE(DISEASEBEFORE instance);
    partial void UpdateDISEASEBEFORE(DISEASEBEFORE instance);
    partial void DeleteDISEASEBEFORE(DISEASEBEFORE instance);
    partial void InsertDISEASEBEFORE_DETAIL(DISEASEBEFORE_DETAIL instance);
    partial void UpdateDISEASEBEFORE_DETAIL(DISEASEBEFORE_DETAIL instance);
    partial void DeleteDISEASEBEFORE_DETAIL(DISEASEBEFORE_DETAIL instance);
    partial void InsertDISTRICT(DISTRICT instance);
    partial void UpdateDISTRICT(DISTRICT instance);
    partial void DeleteDISTRICT(DISTRICT instance);
    partial void InsertDISTRICT_DETAIL(DISTRICT_DETAIL instance);
    partial void UpdateDISTRICT_DETAIL(DISTRICT_DETAIL instance);
    partial void DeleteDISTRICT_DETAIL(DISTRICT_DETAIL instance);
    partial void InsertEMPLOYEE(EMPLOYEE instance);
    partial void UpdateEMPLOYEE(EMPLOYEE instance);
    partial void DeleteEMPLOYEE(EMPLOYEE instance);
    partial void InsertGROUP(GROUP instance);
    partial void UpdateGROUP(GROUP instance);
    partial void DeleteGROUP(GROUP instance);
    partial void InsertGROUP_DETAIL(GROUP_DETAIL instance);
    partial void UpdateGROUP_DETAIL(GROUP_DETAIL instance);
    partial void DeleteGROUP_DETAIL(GROUP_DETAIL instance);
    partial void InsertJOB(JOB instance);
    partial void UpdateJOB(JOB instance);
    partial void DeleteJOB(JOB instance);
    partial void InsertKNOWREASON(KNOWREASON instance);
    partial void UpdateKNOWREASON(KNOWREASON instance);
    partial void DeleteKNOWREASON(KNOWREASON instance);
    partial void InsertKNOWREASON_DETAIL(KNOWREASON_DETAIL instance);
    partial void UpdateKNOWREASON_DETAIL(KNOWREASON_DETAIL instance);
    partial void DeleteKNOWREASON_DETAIL(KNOWREASON_DETAIL instance);
    partial void InsertRULE(RULE instance);
    partial void UpdateRULE(RULE instance);
    partial void DeleteRULE(RULE instance);
    partial void InsertSTREET(STREET instance);
    partial void UpdateSTREET(STREET instance);
    partial void DeleteSTREET(STREET instance);
    partial void InsertTREATMENTDETAIL(TREATMENTDETAIL instance);
    partial void UpdateTREATMENTDETAIL(TREATMENTDETAIL instance);
    partial void DeleteTREATMENTDETAIL(TREATMENTDETAIL instance);
    partial void InsertTREATMENTPLAN(TREATMENTPLAN instance);
    partial void UpdateTREATMENTPLAN(TREATMENTPLAN instance);
    partial void DeleteTREATMENTPLAN(TREATMENTPLAN instance);
    partial void InsertTREATMENTPLAN_DETAIL(TREATMENTPLAN_DETAIL instance);
    partial void UpdateTREATMENTPLAN_DETAIL(TREATMENTPLAN_DETAIL instance);
    partial void DeleteTREATMENTPLAN_DETAIL(TREATMENTPLAN_DETAIL instance);
    partial void InsertTREATMENTPROFILE(TREATMENTPROFILE instance);
    partial void UpdateTREATMENTPROFILE(TREATMENTPROFILE instance);
    partial void DeleteTREATMENTPROFILE(TREATMENTPROFILE instance);
    partial void InsertUSER(USER instance);
    partial void UpdateUSER(USER instance);
    partial void DeleteUSER(USER instance);
    #endregion
		
		public Database_ConnectionDataContext() : 
				base(global::PhongKhamManagement.Properties.Settings.Default.SaiGonDentalConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Database_ConnectionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Database_ConnectionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Database_ConnectionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Database_ConnectionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ACADEMIC> ACADEMICs
		{
			get
			{
				return this.GetTable<ACADEMIC>();
			}
		}
		
		public System.Data.Linq.Table<WARD> WARDs
		{
			get
			{
				return this.GetTable<WARD>();
			}
		}
		
		public System.Data.Linq.Table<BRANCH> BRANCHes
		{
			get
			{
				return this.GetTable<BRANCH>();
			}
		}
		
		public System.Data.Linq.Table<CITY> CITies
		{
			get
			{
				return this.GetTable<CITY>();
			}
		}
		
		public System.Data.Linq.Table<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this.GetTable<CUSTOMER>();
			}
		}
		
		public System.Data.Linq.Table<DEPARTMENT> DEPARTMENTs
		{
			get
			{
				return this.GetTable<DEPARTMENT>();
			}
		}
		
		public System.Data.Linq.Table<DISEASEBEFORE> DISEASEBEFOREs
		{
			get
			{
				return this.GetTable<DISEASEBEFORE>();
			}
		}
		
		public System.Data.Linq.Table<DISEASEBEFORE_DETAIL> DISEASEBEFORE_DETAILs
		{
			get
			{
				return this.GetTable<DISEASEBEFORE_DETAIL>();
			}
		}
		
		public System.Data.Linq.Table<DISTRICT> DISTRICTs
		{
			get
			{
				return this.GetTable<DISTRICT>();
			}
		}
		
		public System.Data.Linq.Table<DISTRICT_DETAIL> DISTRICT_DETAILs
		{
			get
			{
				return this.GetTable<DISTRICT_DETAIL>();
			}
		}
		
		public System.Data.Linq.Table<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this.GetTable<EMPLOYEE>();
			}
		}
		
		public System.Data.Linq.Table<GROUP> GROUPs
		{
			get
			{
				return this.GetTable<GROUP>();
			}
		}
		
		public System.Data.Linq.Table<GROUP_DETAIL> GROUP_DETAILs
		{
			get
			{
				return this.GetTable<GROUP_DETAIL>();
			}
		}
		
		public System.Data.Linq.Table<JOB> JOBs
		{
			get
			{
				return this.GetTable<JOB>();
			}
		}
		
		public System.Data.Linq.Table<KNOWREASON> KNOWREASONs
		{
			get
			{
				return this.GetTable<KNOWREASON>();
			}
		}
		
		public System.Data.Linq.Table<KNOWREASON_DETAIL> KNOWREASON_DETAILs
		{
			get
			{
				return this.GetTable<KNOWREASON_DETAIL>();
			}
		}
		
		public System.Data.Linq.Table<RULE> RULEs
		{
			get
			{
				return this.GetTable<RULE>();
			}
		}
		
		public System.Data.Linq.Table<STREET> STREETs
		{
			get
			{
				return this.GetTable<STREET>();
			}
		}
		
		public System.Data.Linq.Table<TREATMENTDETAIL> TREATMENTDETAILs
		{
			get
			{
				return this.GetTable<TREATMENTDETAIL>();
			}
		}
		
		public System.Data.Linq.Table<TREATMENTPLAN> TREATMENTPLANs
		{
			get
			{
				return this.GetTable<TREATMENTPLAN>();
			}
		}
		
		public System.Data.Linq.Table<TREATMENTPLAN_DETAIL> TREATMENTPLAN_DETAILs
		{
			get
			{
				return this.GetTable<TREATMENTPLAN_DETAIL>();
			}
		}
		
		public System.Data.Linq.Table<TREATMENTPROFILE> TREATMENTPROFILEs
		{
			get
			{
				return this.GetTable<TREATMENTPROFILE>();
			}
		}
		
		public System.Data.Linq.Table<USER> USERs
		{
			get
			{
				return this.GetTable<USER>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ACADEMIC")]
	public partial class ACADEMIC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private string _Detail;
		
		private EntitySet<EMPLOYEE> _EMPLOYEEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    #endregion
		
		public ACADEMIC()
		{
			this._EMPLOYEEs = new EntitySet<EMPLOYEE>(new Action<EMPLOYEE>(this.attach_EMPLOYEEs), new Action<EMPLOYEE>(this.detach_EMPLOYEEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="NVarChar(MAX)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ACADEMIC_EMPLOYEE", Storage="_EMPLOYEEs", ThisKey="Id", OtherKey="AcademicId")]
		public EntitySet<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this._EMPLOYEEs;
			}
			set
			{
				this._EMPLOYEEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.ACADEMIC = this;
		}
		
		private void detach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.ACADEMIC = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WARD")]
	public partial class WARD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private short _DistrictId;
		
		private EntitySet<BRANCH> _BRANCHes;
		
		private EntitySet<CUSTOMER> _CUSTOMERs;
		
		private EntitySet<EMPLOYEE> _EMPLOYEEs;
		
		private EntityRef<DISTRICT> _DISTRICT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDistrictIdChanging(short value);
    partial void OnDistrictIdChanged();
    #endregion
		
		public WARD()
		{
			this._BRANCHes = new EntitySet<BRANCH>(new Action<BRANCH>(this.attach_BRANCHes), new Action<BRANCH>(this.detach_BRANCHes));
			this._CUSTOMERs = new EntitySet<CUSTOMER>(new Action<CUSTOMER>(this.attach_CUSTOMERs), new Action<CUSTOMER>(this.detach_CUSTOMERs));
			this._EMPLOYEEs = new EntitySet<EMPLOYEE>(new Action<EMPLOYEE>(this.attach_EMPLOYEEs), new Action<EMPLOYEE>(this.detach_EMPLOYEEs));
			this._DISTRICT = default(EntityRef<DISTRICT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictId", DbType="SmallInt NOT NULL")]
		public short DistrictId
		{
			get
			{
				return this._DistrictId;
			}
			set
			{
				if ((this._DistrictId != value))
				{
					if (this._DISTRICT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictIdChanging(value);
					this.SendPropertyChanging();
					this._DistrictId = value;
					this.SendPropertyChanged("DistrictId");
					this.OnDistrictIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WARD_BRANCH", Storage="_BRANCHes", ThisKey="Id", OtherKey="WardId")]
		public EntitySet<BRANCH> BRANCHes
		{
			get
			{
				return this._BRANCHes;
			}
			set
			{
				this._BRANCHes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WARD_CUSTOMER", Storage="_CUSTOMERs", ThisKey="Id", OtherKey="WardId")]
		public EntitySet<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this._CUSTOMERs;
			}
			set
			{
				this._CUSTOMERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WARD_EMPLOYEE", Storage="_EMPLOYEEs", ThisKey="Id", OtherKey="WardId")]
		public EntitySet<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this._EMPLOYEEs;
			}
			set
			{
				this._EMPLOYEEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_WARD", Storage="_DISTRICT", ThisKey="DistrictId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DISTRICT DISTRICT
		{
			get
			{
				return this._DISTRICT.Entity;
			}
			set
			{
				DISTRICT previousValue = this._DISTRICT.Entity;
				if (((previousValue != value) 
							|| (this._DISTRICT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DISTRICT.Entity = null;
						previousValue.WARDs.Remove(this);
					}
					this._DISTRICT.Entity = value;
					if ((value != null))
					{
						value.WARDs.Add(this);
						this._DistrictId = value.Id;
					}
					else
					{
						this._DistrictId = default(short);
					}
					this.SendPropertyChanged("DISTRICT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BRANCHes(BRANCH entity)
		{
			this.SendPropertyChanging();
			entity.WARD = this;
		}
		
		private void detach_BRANCHes(BRANCH entity)
		{
			this.SendPropertyChanging();
			entity.WARD = null;
		}
		
		private void attach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.WARD = this;
		}
		
		private void detach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.WARD = null;
		}
		
		private void attach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.WARD = this;
		}
		
		private void detach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.WARD = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BRANCH")]
	public partial class BRANCH : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private short _CityId;
		
		private System.Nullable<short> _DistrictId;
		
		private System.Nullable<short> _WardId;
		
		private System.Nullable<short> _StreetId;
		
		private string _AddressDetail;
		
		private EntitySet<CUSTOMER> _CUSTOMERs;
		
		private EntitySet<EMPLOYEE> _EMPLOYEEs;
		
		private EntityRef<WARD> _WARD;
		
		private EntityRef<CITY> _CITY;
		
		private EntityRef<DISTRICT> _DISTRICT;
		
		private EntityRef<STREET> _STREET;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCityIdChanging(short value);
    partial void OnCityIdChanged();
    partial void OnDistrictIdChanging(System.Nullable<short> value);
    partial void OnDistrictIdChanged();
    partial void OnWardIdChanging(System.Nullable<short> value);
    partial void OnWardIdChanged();
    partial void OnStreetIdChanging(System.Nullable<short> value);
    partial void OnStreetIdChanged();
    partial void OnAddressDetailChanging(string value);
    partial void OnAddressDetailChanged();
    #endregion
		
		public BRANCH()
		{
			this._CUSTOMERs = new EntitySet<CUSTOMER>(new Action<CUSTOMER>(this.attach_CUSTOMERs), new Action<CUSTOMER>(this.detach_CUSTOMERs));
			this._EMPLOYEEs = new EntitySet<EMPLOYEE>(new Action<EMPLOYEE>(this.attach_EMPLOYEEs), new Action<EMPLOYEE>(this.detach_EMPLOYEEs));
			this._WARD = default(EntityRef<WARD>);
			this._CITY = default(EntityRef<CITY>);
			this._DISTRICT = default(EntityRef<DISTRICT>);
			this._STREET = default(EntityRef<STREET>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="SmallInt NOT NULL")]
		public short CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._CITY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictId", DbType="SmallInt")]
		public System.Nullable<short> DistrictId
		{
			get
			{
				return this._DistrictId;
			}
			set
			{
				if ((this._DistrictId != value))
				{
					if (this._DISTRICT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictIdChanging(value);
					this.SendPropertyChanging();
					this._DistrictId = value;
					this.SendPropertyChanged("DistrictId");
					this.OnDistrictIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WardId", DbType="SmallInt")]
		public System.Nullable<short> WardId
		{
			get
			{
				return this._WardId;
			}
			set
			{
				if ((this._WardId != value))
				{
					if (this._WARD.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWardIdChanging(value);
					this.SendPropertyChanging();
					this._WardId = value;
					this.SendPropertyChanged("WardId");
					this.OnWardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetId", DbType="SmallInt")]
		public System.Nullable<short> StreetId
		{
			get
			{
				return this._StreetId;
			}
			set
			{
				if ((this._StreetId != value))
				{
					if (this._STREET.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreetIdChanging(value);
					this.SendPropertyChanging();
					this._StreetId = value;
					this.SendPropertyChanged("StreetId");
					this.OnStreetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressDetail", DbType="NVarChar(MAX)")]
		public string AddressDetail
		{
			get
			{
				return this._AddressDetail;
			}
			set
			{
				if ((this._AddressDetail != value))
				{
					this.OnAddressDetailChanging(value);
					this.SendPropertyChanging();
					this._AddressDetail = value;
					this.SendPropertyChanged("AddressDetail");
					this.OnAddressDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BRANCH_CUSTOMER", Storage="_CUSTOMERs", ThisKey="Id", OtherKey="BranchId")]
		public EntitySet<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this._CUSTOMERs;
			}
			set
			{
				this._CUSTOMERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BRANCH_EMPLOYEE", Storage="_EMPLOYEEs", ThisKey="Id", OtherKey="BranchId")]
		public EntitySet<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this._EMPLOYEEs;
			}
			set
			{
				this._EMPLOYEEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WARD_BRANCH", Storage="_WARD", ThisKey="WardId", OtherKey="Id", IsForeignKey=true)]
		public WARD WARD
		{
			get
			{
				return this._WARD.Entity;
			}
			set
			{
				WARD previousValue = this._WARD.Entity;
				if (((previousValue != value) 
							|| (this._WARD.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WARD.Entity = null;
						previousValue.BRANCHes.Remove(this);
					}
					this._WARD.Entity = value;
					if ((value != null))
					{
						value.BRANCHes.Add(this);
						this._WardId = value.Id;
					}
					else
					{
						this._WardId = default(Nullable<short>);
					}
					this.SendPropertyChanged("WARD");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CITY_BRANCH", Storage="_CITY", ThisKey="CityId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CITY CITY
		{
			get
			{
				return this._CITY.Entity;
			}
			set
			{
				CITY previousValue = this._CITY.Entity;
				if (((previousValue != value) 
							|| (this._CITY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CITY.Entity = null;
						previousValue.BRANCHes.Remove(this);
					}
					this._CITY.Entity = value;
					if ((value != null))
					{
						value.BRANCHes.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(short);
					}
					this.SendPropertyChanged("CITY");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_BRANCH", Storage="_DISTRICT", ThisKey="DistrictId", OtherKey="Id", IsForeignKey=true)]
		public DISTRICT DISTRICT
		{
			get
			{
				return this._DISTRICT.Entity;
			}
			set
			{
				DISTRICT previousValue = this._DISTRICT.Entity;
				if (((previousValue != value) 
							|| (this._DISTRICT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DISTRICT.Entity = null;
						previousValue.BRANCHes.Remove(this);
					}
					this._DISTRICT.Entity = value;
					if ((value != null))
					{
						value.BRANCHes.Add(this);
						this._DistrictId = value.Id;
					}
					else
					{
						this._DistrictId = default(Nullable<short>);
					}
					this.SendPropertyChanged("DISTRICT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STREET_BRANCH", Storage="_STREET", ThisKey="StreetId", OtherKey="Id", IsForeignKey=true)]
		public STREET STREET
		{
			get
			{
				return this._STREET.Entity;
			}
			set
			{
				STREET previousValue = this._STREET.Entity;
				if (((previousValue != value) 
							|| (this._STREET.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STREET.Entity = null;
						previousValue.BRANCHes.Remove(this);
					}
					this._STREET.Entity = value;
					if ((value != null))
					{
						value.BRANCHes.Add(this);
						this._StreetId = value.Id;
					}
					else
					{
						this._StreetId = default(Nullable<short>);
					}
					this.SendPropertyChanged("STREET");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.BRANCH = this;
		}
		
		private void detach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.BRANCH = null;
		}
		
		private void attach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.BRANCH = this;
		}
		
		private void detach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.BRANCH = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CITY")]
	public partial class CITY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private EntitySet<BRANCH> _BRANCHes;
		
		private EntitySet<CUSTOMER> _CUSTOMERs;
		
		private EntitySet<DISTRICT> _DISTRICTs;
		
		private EntitySet<EMPLOYEE> _EMPLOYEEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CITY()
		{
			this._BRANCHes = new EntitySet<BRANCH>(new Action<BRANCH>(this.attach_BRANCHes), new Action<BRANCH>(this.detach_BRANCHes));
			this._CUSTOMERs = new EntitySet<CUSTOMER>(new Action<CUSTOMER>(this.attach_CUSTOMERs), new Action<CUSTOMER>(this.detach_CUSTOMERs));
			this._DISTRICTs = new EntitySet<DISTRICT>(new Action<DISTRICT>(this.attach_DISTRICTs), new Action<DISTRICT>(this.detach_DISTRICTs));
			this._EMPLOYEEs = new EntitySet<EMPLOYEE>(new Action<EMPLOYEE>(this.attach_EMPLOYEEs), new Action<EMPLOYEE>(this.detach_EMPLOYEEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CITY_BRANCH", Storage="_BRANCHes", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<BRANCH> BRANCHes
		{
			get
			{
				return this._BRANCHes;
			}
			set
			{
				this._BRANCHes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CITY_CUSTOMER", Storage="_CUSTOMERs", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this._CUSTOMERs;
			}
			set
			{
				this._CUSTOMERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CITY_DISTRICT", Storage="_DISTRICTs", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<DISTRICT> DISTRICTs
		{
			get
			{
				return this._DISTRICTs;
			}
			set
			{
				this._DISTRICTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CITY_EMPLOYEE", Storage="_EMPLOYEEs", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this._EMPLOYEEs;
			}
			set
			{
				this._EMPLOYEEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BRANCHes(BRANCH entity)
		{
			this.SendPropertyChanging();
			entity.CITY = this;
		}
		
		private void detach_BRANCHes(BRANCH entity)
		{
			this.SendPropertyChanging();
			entity.CITY = null;
		}
		
		private void attach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.CITY = this;
		}
		
		private void detach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.CITY = null;
		}
		
		private void attach_DISTRICTs(DISTRICT entity)
		{
			this.SendPropertyChanging();
			entity.CITY = this;
		}
		
		private void detach_DISTRICTs(DISTRICT entity)
		{
			this.SendPropertyChanging();
			entity.CITY = null;
		}
		
		private void attach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.CITY = this;
		}
		
		private void detach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.CITY = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CUSTOMER")]
	public partial class CUSTOMER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private System.Nullable<bool> _Gender;
		
		private short _CityId;
		
		private short _DistrictId;
		
		private System.Nullable<short> _WardId;
		
		private System.Nullable<short> _StreetId;
		
		private string _AddressDetail;
		
		private string _Phone;
		
		private string _Email;
		
		private short _JobId;
		
		private System.Nullable<short> _BranchId;
		
		private EntitySet<DISEASEBEFORE_DETAIL> _DISEASEBEFORE_DETAILs;
		
		private EntitySet<KNOWREASON_DETAIL> _KNOWREASON_DETAILs;
		
		private EntitySet<TREATMENTDETAIL> _TREATMENTDETAILs;
		
		private EntitySet<TREATMENTPROFILE> _TREATMENTPROFILEs;
		
		private EntityRef<BRANCH> _BRANCH;
		
		private EntityRef<CITY> _CITY;
		
		private EntityRef<WARD> _WARD;
		
		private EntityRef<DISTRICT> _DISTRICT;
		
		private EntityRef<JOB> _JOB;
		
		private EntityRef<STREET> _STREET;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnCityIdChanging(short value);
    partial void OnCityIdChanged();
    partial void OnDistrictIdChanging(short value);
    partial void OnDistrictIdChanged();
    partial void OnWardIdChanging(System.Nullable<short> value);
    partial void OnWardIdChanged();
    partial void OnStreetIdChanging(System.Nullable<short> value);
    partial void OnStreetIdChanged();
    partial void OnAddressDetailChanging(string value);
    partial void OnAddressDetailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnJobIdChanging(short value);
    partial void OnJobIdChanged();
    partial void OnBranchIdChanging(System.Nullable<short> value);
    partial void OnBranchIdChanged();
    #endregion
		
		public CUSTOMER()
		{
			this._DISEASEBEFORE_DETAILs = new EntitySet<DISEASEBEFORE_DETAIL>(new Action<DISEASEBEFORE_DETAIL>(this.attach_DISEASEBEFORE_DETAILs), new Action<DISEASEBEFORE_DETAIL>(this.detach_DISEASEBEFORE_DETAILs));
			this._KNOWREASON_DETAILs = new EntitySet<KNOWREASON_DETAIL>(new Action<KNOWREASON_DETAIL>(this.attach_KNOWREASON_DETAILs), new Action<KNOWREASON_DETAIL>(this.detach_KNOWREASON_DETAILs));
			this._TREATMENTDETAILs = new EntitySet<TREATMENTDETAIL>(new Action<TREATMENTDETAIL>(this.attach_TREATMENTDETAILs), new Action<TREATMENTDETAIL>(this.detach_TREATMENTDETAILs));
			this._TREATMENTPROFILEs = new EntitySet<TREATMENTPROFILE>(new Action<TREATMENTPROFILE>(this.attach_TREATMENTPROFILEs), new Action<TREATMENTPROFILE>(this.detach_TREATMENTPROFILEs));
			this._BRANCH = default(EntityRef<BRANCH>);
			this._CITY = default(EntityRef<CITY>);
			this._WARD = default(EntityRef<WARD>);
			this._DISTRICT = default(EntityRef<DISTRICT>);
			this._JOB = default(EntityRef<JOB>);
			this._STREET = default(EntityRef<STREET>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Char(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="SmallInt NOT NULL")]
		public short CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._CITY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictId", DbType="SmallInt NOT NULL")]
		public short DistrictId
		{
			get
			{
				return this._DistrictId;
			}
			set
			{
				if ((this._DistrictId != value))
				{
					if (this._DISTRICT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictIdChanging(value);
					this.SendPropertyChanging();
					this._DistrictId = value;
					this.SendPropertyChanged("DistrictId");
					this.OnDistrictIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WardId", DbType="SmallInt")]
		public System.Nullable<short> WardId
		{
			get
			{
				return this._WardId;
			}
			set
			{
				if ((this._WardId != value))
				{
					if (this._WARD.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWardIdChanging(value);
					this.SendPropertyChanging();
					this._WardId = value;
					this.SendPropertyChanged("WardId");
					this.OnWardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetId", DbType="SmallInt")]
		public System.Nullable<short> StreetId
		{
			get
			{
				return this._StreetId;
			}
			set
			{
				if ((this._StreetId != value))
				{
					if (this._STREET.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreetIdChanging(value);
					this.SendPropertyChanging();
					this._StreetId = value;
					this.SendPropertyChanged("StreetId");
					this.OnStreetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressDetail", DbType="NVarChar(MAX)")]
		public string AddressDetail
		{
			get
			{
				return this._AddressDetail;
			}
			set
			{
				if ((this._AddressDetail != value))
				{
					this.OnAddressDetailChanging(value);
					this.SendPropertyChanging();
					this._AddressDetail = value;
					this.SendPropertyChanged("AddressDetail");
					this.OnAddressDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(70)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(70)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="SmallInt NOT NULL")]
		public short JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._JOB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchId", DbType="SmallInt")]
		public System.Nullable<short> BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					if (this._BRANCH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_DISEASEBEFORE_DETAIL", Storage="_DISEASEBEFORE_DETAILs", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<DISEASEBEFORE_DETAIL> DISEASEBEFORE_DETAILs
		{
			get
			{
				return this._DISEASEBEFORE_DETAILs;
			}
			set
			{
				this._DISEASEBEFORE_DETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_KNOWREASON_DETAIL", Storage="_KNOWREASON_DETAILs", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<KNOWREASON_DETAIL> KNOWREASON_DETAILs
		{
			get
			{
				return this._KNOWREASON_DETAILs;
			}
			set
			{
				this._KNOWREASON_DETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_TREATMENTDETAIL", Storage="_TREATMENTDETAILs", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<TREATMENTDETAIL> TREATMENTDETAILs
		{
			get
			{
				return this._TREATMENTDETAILs;
			}
			set
			{
				this._TREATMENTDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_TREATMENTPROFILE", Storage="_TREATMENTPROFILEs", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<TREATMENTPROFILE> TREATMENTPROFILEs
		{
			get
			{
				return this._TREATMENTPROFILEs;
			}
			set
			{
				this._TREATMENTPROFILEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BRANCH_CUSTOMER", Storage="_BRANCH", ThisKey="BranchId", OtherKey="Id", IsForeignKey=true)]
		public BRANCH BRANCH
		{
			get
			{
				return this._BRANCH.Entity;
			}
			set
			{
				BRANCH previousValue = this._BRANCH.Entity;
				if (((previousValue != value) 
							|| (this._BRANCH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BRANCH.Entity = null;
						previousValue.CUSTOMERs.Remove(this);
					}
					this._BRANCH.Entity = value;
					if ((value != null))
					{
						value.CUSTOMERs.Add(this);
						this._BranchId = value.Id;
					}
					else
					{
						this._BranchId = default(Nullable<short>);
					}
					this.SendPropertyChanged("BRANCH");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CITY_CUSTOMER", Storage="_CITY", ThisKey="CityId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CITY CITY
		{
			get
			{
				return this._CITY.Entity;
			}
			set
			{
				CITY previousValue = this._CITY.Entity;
				if (((previousValue != value) 
							|| (this._CITY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CITY.Entity = null;
						previousValue.CUSTOMERs.Remove(this);
					}
					this._CITY.Entity = value;
					if ((value != null))
					{
						value.CUSTOMERs.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(short);
					}
					this.SendPropertyChanged("CITY");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WARD_CUSTOMER", Storage="_WARD", ThisKey="WardId", OtherKey="Id", IsForeignKey=true)]
		public WARD WARD
		{
			get
			{
				return this._WARD.Entity;
			}
			set
			{
				WARD previousValue = this._WARD.Entity;
				if (((previousValue != value) 
							|| (this._WARD.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WARD.Entity = null;
						previousValue.CUSTOMERs.Remove(this);
					}
					this._WARD.Entity = value;
					if ((value != null))
					{
						value.CUSTOMERs.Add(this);
						this._WardId = value.Id;
					}
					else
					{
						this._WardId = default(Nullable<short>);
					}
					this.SendPropertyChanged("WARD");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_CUSTOMER", Storage="_DISTRICT", ThisKey="DistrictId", OtherKey="Id", IsForeignKey=true)]
		public DISTRICT DISTRICT
		{
			get
			{
				return this._DISTRICT.Entity;
			}
			set
			{
				DISTRICT previousValue = this._DISTRICT.Entity;
				if (((previousValue != value) 
							|| (this._DISTRICT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DISTRICT.Entity = null;
						previousValue.CUSTOMERs.Remove(this);
					}
					this._DISTRICT.Entity = value;
					if ((value != null))
					{
						value.CUSTOMERs.Add(this);
						this._DistrictId = value.Id;
					}
					else
					{
						this._DistrictId = default(short);
					}
					this.SendPropertyChanged("DISTRICT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JOB_CUSTOMER", Storage="_JOB", ThisKey="JobId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public JOB JOB
		{
			get
			{
				return this._JOB.Entity;
			}
			set
			{
				JOB previousValue = this._JOB.Entity;
				if (((previousValue != value) 
							|| (this._JOB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JOB.Entity = null;
						previousValue.CUSTOMERs.Remove(this);
					}
					this._JOB.Entity = value;
					if ((value != null))
					{
						value.CUSTOMERs.Add(this);
						this._JobId = value.Id;
					}
					else
					{
						this._JobId = default(short);
					}
					this.SendPropertyChanged("JOB");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STREET_CUSTOMER", Storage="_STREET", ThisKey="StreetId", OtherKey="Id", IsForeignKey=true)]
		public STREET STREET
		{
			get
			{
				return this._STREET.Entity;
			}
			set
			{
				STREET previousValue = this._STREET.Entity;
				if (((previousValue != value) 
							|| (this._STREET.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STREET.Entity = null;
						previousValue.CUSTOMERs.Remove(this);
					}
					this._STREET.Entity = value;
					if ((value != null))
					{
						value.CUSTOMERs.Add(this);
						this._StreetId = value.Id;
					}
					else
					{
						this._StreetId = default(Nullable<short>);
					}
					this.SendPropertyChanged("STREET");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DISEASEBEFORE_DETAILs(DISEASEBEFORE_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_DISEASEBEFORE_DETAILs(DISEASEBEFORE_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
		
		private void attach_KNOWREASON_DETAILs(KNOWREASON_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_KNOWREASON_DETAILs(KNOWREASON_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
		
		private void attach_TREATMENTDETAILs(TREATMENTDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_TREATMENTDETAILs(TREATMENTDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
		
		private void attach_TREATMENTPROFILEs(TREATMENTPROFILE entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_TREATMENTPROFILEs(TREATMENTPROFILE entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DEPARTMENT")]
	public partial class DEPARTMENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private string _Detail;
		
		private EntitySet<EMPLOYEE> _EMPLOYEEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    #endregion
		
		public DEPARTMENT()
		{
			this._EMPLOYEEs = new EntitySet<EMPLOYEE>(new Action<EMPLOYEE>(this.attach_EMPLOYEEs), new Action<EMPLOYEE>(this.detach_EMPLOYEEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="NVarChar(MAX)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTMENT_EMPLOYEE", Storage="_EMPLOYEEs", ThisKey="Id", OtherKey="DepartmentId")]
		public EntitySet<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this._EMPLOYEEs;
			}
			set
			{
				this._EMPLOYEEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.DEPARTMENT = this;
		}
		
		private void detach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.DEPARTMENT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DISEASEBEFORE")]
	public partial class DISEASEBEFORE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private string _Detail;
		
		private EntitySet<DISEASEBEFORE_DETAIL> _DISEASEBEFORE_DETAILs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    #endregion
		
		public DISEASEBEFORE()
		{
			this._DISEASEBEFORE_DETAILs = new EntitySet<DISEASEBEFORE_DETAIL>(new Action<DISEASEBEFORE_DETAIL>(this.attach_DISEASEBEFORE_DETAILs), new Action<DISEASEBEFORE_DETAIL>(this.detach_DISEASEBEFORE_DETAILs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="NVarChar(MAX)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISEASEBEFORE_DISEASEBEFORE_DETAIL", Storage="_DISEASEBEFORE_DETAILs", ThisKey="Id", OtherKey="DiseaseBeforeId")]
		public EntitySet<DISEASEBEFORE_DETAIL> DISEASEBEFORE_DETAILs
		{
			get
			{
				return this._DISEASEBEFORE_DETAILs;
			}
			set
			{
				this._DISEASEBEFORE_DETAILs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DISEASEBEFORE_DETAILs(DISEASEBEFORE_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.DISEASEBEFORE = this;
		}
		
		private void detach_DISEASEBEFORE_DETAILs(DISEASEBEFORE_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.DISEASEBEFORE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DISEASEBEFORE_DETAIL")]
	public partial class DISEASEBEFORE_DETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CustomerId;
		
		private short _DiseaseBeforeId;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
		private EntityRef<DISEASEBEFORE> _DISEASEBEFORE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCustomerIdChanging(string value);
    partial void OnCustomerIdChanged();
    partial void OnDiseaseBeforeIdChanging(short value);
    partial void OnDiseaseBeforeIdChanged();
    #endregion
		
		public DISEASEBEFORE_DETAIL()
		{
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			this._DISEASEBEFORE = default(EntityRef<DISEASEBEFORE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Char(12) NOT NULL", CanBeNull=false)]
		public string CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseBeforeId", DbType="SmallInt NOT NULL")]
		public short DiseaseBeforeId
		{
			get
			{
				return this._DiseaseBeforeId;
			}
			set
			{
				if ((this._DiseaseBeforeId != value))
				{
					if (this._DISEASEBEFORE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDiseaseBeforeIdChanging(value);
					this.SendPropertyChanging();
					this._DiseaseBeforeId = value;
					this.SendPropertyChanged("DiseaseBeforeId");
					this.OnDiseaseBeforeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_DISEASEBEFORE_DETAIL", Storage="_CUSTOMER", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.DISEASEBEFORE_DETAILs.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.DISEASEBEFORE_DETAILs.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(string);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISEASEBEFORE_DISEASEBEFORE_DETAIL", Storage="_DISEASEBEFORE", ThisKey="DiseaseBeforeId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DISEASEBEFORE DISEASEBEFORE
		{
			get
			{
				return this._DISEASEBEFORE.Entity;
			}
			set
			{
				DISEASEBEFORE previousValue = this._DISEASEBEFORE.Entity;
				if (((previousValue != value) 
							|| (this._DISEASEBEFORE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DISEASEBEFORE.Entity = null;
						previousValue.DISEASEBEFORE_DETAILs.Remove(this);
					}
					this._DISEASEBEFORE.Entity = value;
					if ((value != null))
					{
						value.DISEASEBEFORE_DETAILs.Add(this);
						this._DiseaseBeforeId = value.Id;
					}
					else
					{
						this._DiseaseBeforeId = default(short);
					}
					this.SendPropertyChanged("DISEASEBEFORE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DISTRICT")]
	public partial class DISTRICT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private short _CityId;
		
		private EntitySet<WARD> _WARDs;
		
		private EntitySet<BRANCH> _BRANCHes;
		
		private EntitySet<CUSTOMER> _CUSTOMERs;
		
		private EntitySet<DISTRICT_DETAIL> _DISTRICT_DETAILs;
		
		private EntitySet<EMPLOYEE> _EMPLOYEEs;
		
		private EntityRef<CITY> _CITY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCityIdChanging(short value);
    partial void OnCityIdChanged();
    #endregion
		
		public DISTRICT()
		{
			this._WARDs = new EntitySet<WARD>(new Action<WARD>(this.attach_WARDs), new Action<WARD>(this.detach_WARDs));
			this._BRANCHes = new EntitySet<BRANCH>(new Action<BRANCH>(this.attach_BRANCHes), new Action<BRANCH>(this.detach_BRANCHes));
			this._CUSTOMERs = new EntitySet<CUSTOMER>(new Action<CUSTOMER>(this.attach_CUSTOMERs), new Action<CUSTOMER>(this.detach_CUSTOMERs));
			this._DISTRICT_DETAILs = new EntitySet<DISTRICT_DETAIL>(new Action<DISTRICT_DETAIL>(this.attach_DISTRICT_DETAILs), new Action<DISTRICT_DETAIL>(this.detach_DISTRICT_DETAILs));
			this._EMPLOYEEs = new EntitySet<EMPLOYEE>(new Action<EMPLOYEE>(this.attach_EMPLOYEEs), new Action<EMPLOYEE>(this.detach_EMPLOYEEs));
			this._CITY = default(EntityRef<CITY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="SmallInt NOT NULL")]
		public short CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._CITY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_WARD", Storage="_WARDs", ThisKey="Id", OtherKey="DistrictId")]
		public EntitySet<WARD> WARDs
		{
			get
			{
				return this._WARDs;
			}
			set
			{
				this._WARDs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_BRANCH", Storage="_BRANCHes", ThisKey="Id", OtherKey="DistrictId")]
		public EntitySet<BRANCH> BRANCHes
		{
			get
			{
				return this._BRANCHes;
			}
			set
			{
				this._BRANCHes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_CUSTOMER", Storage="_CUSTOMERs", ThisKey="Id", OtherKey="DistrictId")]
		public EntitySet<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this._CUSTOMERs;
			}
			set
			{
				this._CUSTOMERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_DISTRICT_DETAIL", Storage="_DISTRICT_DETAILs", ThisKey="Id", OtherKey="DistrictId")]
		public EntitySet<DISTRICT_DETAIL> DISTRICT_DETAILs
		{
			get
			{
				return this._DISTRICT_DETAILs;
			}
			set
			{
				this._DISTRICT_DETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_EMPLOYEE", Storage="_EMPLOYEEs", ThisKey="Id", OtherKey="DistrictId")]
		public EntitySet<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this._EMPLOYEEs;
			}
			set
			{
				this._EMPLOYEEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CITY_DISTRICT", Storage="_CITY", ThisKey="CityId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CITY CITY
		{
			get
			{
				return this._CITY.Entity;
			}
			set
			{
				CITY previousValue = this._CITY.Entity;
				if (((previousValue != value) 
							|| (this._CITY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CITY.Entity = null;
						previousValue.DISTRICTs.Remove(this);
					}
					this._CITY.Entity = value;
					if ((value != null))
					{
						value.DISTRICTs.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(short);
					}
					this.SendPropertyChanged("CITY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WARDs(WARD entity)
		{
			this.SendPropertyChanging();
			entity.DISTRICT = this;
		}
		
		private void detach_WARDs(WARD entity)
		{
			this.SendPropertyChanging();
			entity.DISTRICT = null;
		}
		
		private void attach_BRANCHes(BRANCH entity)
		{
			this.SendPropertyChanging();
			entity.DISTRICT = this;
		}
		
		private void detach_BRANCHes(BRANCH entity)
		{
			this.SendPropertyChanging();
			entity.DISTRICT = null;
		}
		
		private void attach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.DISTRICT = this;
		}
		
		private void detach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.DISTRICT = null;
		}
		
		private void attach_DISTRICT_DETAILs(DISTRICT_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.DISTRICT = this;
		}
		
		private void detach_DISTRICT_DETAILs(DISTRICT_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.DISTRICT = null;
		}
		
		private void attach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.DISTRICT = this;
		}
		
		private void detach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.DISTRICT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DISTRICT_DETAIL")]
	public partial class DISTRICT_DETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private short _DistrictId;
		
		private short _StreetId;
		
		private EntityRef<DISTRICT> _DISTRICT;
		
		private EntityRef<STREET> _STREET;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnDistrictIdChanging(short value);
    partial void OnDistrictIdChanged();
    partial void OnStreetIdChanging(short value);
    partial void OnStreetIdChanged();
    #endregion
		
		public DISTRICT_DETAIL()
		{
			this._DISTRICT = default(EntityRef<DISTRICT>);
			this._STREET = default(EntityRef<STREET>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictId", DbType="SmallInt NOT NULL")]
		public short DistrictId
		{
			get
			{
				return this._DistrictId;
			}
			set
			{
				if ((this._DistrictId != value))
				{
					if (this._DISTRICT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictIdChanging(value);
					this.SendPropertyChanging();
					this._DistrictId = value;
					this.SendPropertyChanged("DistrictId");
					this.OnDistrictIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetId", DbType="SmallInt NOT NULL")]
		public short StreetId
		{
			get
			{
				return this._StreetId;
			}
			set
			{
				if ((this._StreetId != value))
				{
					if (this._STREET.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreetIdChanging(value);
					this.SendPropertyChanging();
					this._StreetId = value;
					this.SendPropertyChanged("StreetId");
					this.OnStreetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_DISTRICT_DETAIL", Storage="_DISTRICT", ThisKey="DistrictId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DISTRICT DISTRICT
		{
			get
			{
				return this._DISTRICT.Entity;
			}
			set
			{
				DISTRICT previousValue = this._DISTRICT.Entity;
				if (((previousValue != value) 
							|| (this._DISTRICT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DISTRICT.Entity = null;
						previousValue.DISTRICT_DETAILs.Remove(this);
					}
					this._DISTRICT.Entity = value;
					if ((value != null))
					{
						value.DISTRICT_DETAILs.Add(this);
						this._DistrictId = value.Id;
					}
					else
					{
						this._DistrictId = default(short);
					}
					this.SendPropertyChanged("DISTRICT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STREET_DISTRICT_DETAIL", Storage="_STREET", ThisKey="StreetId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public STREET STREET
		{
			get
			{
				return this._STREET.Entity;
			}
			set
			{
				STREET previousValue = this._STREET.Entity;
				if (((previousValue != value) 
							|| (this._STREET.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STREET.Entity = null;
						previousValue.DISTRICT_DETAILs.Remove(this);
					}
					this._STREET.Entity = value;
					if ((value != null))
					{
						value.DISTRICT_DETAILs.Add(this);
						this._StreetId = value.Id;
					}
					else
					{
						this._StreetId = default(short);
					}
					this.SendPropertyChanged("STREET");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EMPLOYEE")]
	public partial class EMPLOYEE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private System.Nullable<bool> _Gender;
		
		private short _CityId;
		
		private short _DistrictId;
		
		private System.Nullable<short> _WardId;
		
		private System.Nullable<short> _StreetId;
		
		private string _AddressDetail;
		
		private string _Phone;
		
		private string _Email;
		
		private short _DepartmentId;
		
		private short _AcademicId;
		
		private System.Nullable<short> _BranchId;
		
		private EntitySet<TREATMENTDETAIL> _TREATMENTDETAILs;
		
		private EntitySet<TREATMENTDETAIL> _TREATMENTDETAILs1;
		
		private EntitySet<USER> _USERs;
		
		private EntityRef<ACADEMIC> _ACADEMIC;
		
		private EntityRef<BRANCH> _BRANCH;
		
		private EntityRef<CITY> _CITY;
		
		private EntityRef<DEPARTMENT> _DEPARTMENT;
		
		private EntityRef<DISTRICT> _DISTRICT;
		
		private EntityRef<WARD> _WARD;
		
		private EntityRef<STREET> _STREET;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnCityIdChanging(short value);
    partial void OnCityIdChanged();
    partial void OnDistrictIdChanging(short value);
    partial void OnDistrictIdChanged();
    partial void OnWardIdChanging(System.Nullable<short> value);
    partial void OnWardIdChanged();
    partial void OnStreetIdChanging(System.Nullable<short> value);
    partial void OnStreetIdChanged();
    partial void OnAddressDetailChanging(string value);
    partial void OnAddressDetailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDepartmentIdChanging(short value);
    partial void OnDepartmentIdChanged();
    partial void OnAcademicIdChanging(short value);
    partial void OnAcademicIdChanged();
    partial void OnBranchIdChanging(System.Nullable<short> value);
    partial void OnBranchIdChanged();
    #endregion
		
		public EMPLOYEE()
		{
			this._TREATMENTDETAILs = new EntitySet<TREATMENTDETAIL>(new Action<TREATMENTDETAIL>(this.attach_TREATMENTDETAILs), new Action<TREATMENTDETAIL>(this.detach_TREATMENTDETAILs));
			this._TREATMENTDETAILs1 = new EntitySet<TREATMENTDETAIL>(new Action<TREATMENTDETAIL>(this.attach_TREATMENTDETAILs1), new Action<TREATMENTDETAIL>(this.detach_TREATMENTDETAILs1));
			this._USERs = new EntitySet<USER>(new Action<USER>(this.attach_USERs), new Action<USER>(this.detach_USERs));
			this._ACADEMIC = default(EntityRef<ACADEMIC>);
			this._BRANCH = default(EntityRef<BRANCH>);
			this._CITY = default(EntityRef<CITY>);
			this._DEPARTMENT = default(EntityRef<DEPARTMENT>);
			this._DISTRICT = default(EntityRef<DISTRICT>);
			this._WARD = default(EntityRef<WARD>);
			this._STREET = default(EntityRef<STREET>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="SmallInt NOT NULL")]
		public short CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._CITY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictId", DbType="SmallInt NOT NULL")]
		public short DistrictId
		{
			get
			{
				return this._DistrictId;
			}
			set
			{
				if ((this._DistrictId != value))
				{
					if (this._DISTRICT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictIdChanging(value);
					this.SendPropertyChanging();
					this._DistrictId = value;
					this.SendPropertyChanged("DistrictId");
					this.OnDistrictIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WardId", DbType="SmallInt")]
		public System.Nullable<short> WardId
		{
			get
			{
				return this._WardId;
			}
			set
			{
				if ((this._WardId != value))
				{
					if (this._WARD.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWardIdChanging(value);
					this.SendPropertyChanging();
					this._WardId = value;
					this.SendPropertyChanged("WardId");
					this.OnWardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetId", DbType="SmallInt")]
		public System.Nullable<short> StreetId
		{
			get
			{
				return this._StreetId;
			}
			set
			{
				if ((this._StreetId != value))
				{
					if (this._STREET.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreetIdChanging(value);
					this.SendPropertyChanging();
					this._StreetId = value;
					this.SendPropertyChanged("StreetId");
					this.OnStreetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressDetail", DbType="NVarChar(MAX)")]
		public string AddressDetail
		{
			get
			{
				return this._AddressDetail;
			}
			set
			{
				if ((this._AddressDetail != value))
				{
					this.OnAddressDetailChanging(value);
					this.SendPropertyChanging();
					this._AddressDetail = value;
					this.SendPropertyChanged("AddressDetail");
					this.OnAddressDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(70)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(70)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="SmallInt NOT NULL")]
		public short DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._DEPARTMENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicId", DbType="SmallInt NOT NULL")]
		public short AcademicId
		{
			get
			{
				return this._AcademicId;
			}
			set
			{
				if ((this._AcademicId != value))
				{
					if (this._ACADEMIC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAcademicIdChanging(value);
					this.SendPropertyChanging();
					this._AcademicId = value;
					this.SendPropertyChanged("AcademicId");
					this.OnAcademicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BranchId", DbType="SmallInt")]
		public System.Nullable<short> BranchId
		{
			get
			{
				return this._BranchId;
			}
			set
			{
				if ((this._BranchId != value))
				{
					if (this._BRANCH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranchIdChanging(value);
					this.SendPropertyChanging();
					this._BranchId = value;
					this.SendPropertyChanged("BranchId");
					this.OnBranchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_TREATMENTDETAIL", Storage="_TREATMENTDETAILs", ThisKey="Id", OtherKey="ReceptionistId")]
		public EntitySet<TREATMENTDETAIL> TREATMENTDETAILs
		{
			get
			{
				return this._TREATMENTDETAILs;
			}
			set
			{
				this._TREATMENTDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_TREATMENTDETAIL1", Storage="_TREATMENTDETAILs1", ThisKey="Id", OtherKey="DoctorId")]
		public EntitySet<TREATMENTDETAIL> TREATMENTDETAILs1
		{
			get
			{
				return this._TREATMENTDETAILs1;
			}
			set
			{
				this._TREATMENTDETAILs1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_USER", Storage="_USERs", ThisKey="Id", OtherKey="EmployeeId")]
		public EntitySet<USER> USERs
		{
			get
			{
				return this._USERs;
			}
			set
			{
				this._USERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ACADEMIC_EMPLOYEE", Storage="_ACADEMIC", ThisKey="AcademicId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ACADEMIC ACADEMIC
		{
			get
			{
				return this._ACADEMIC.Entity;
			}
			set
			{
				ACADEMIC previousValue = this._ACADEMIC.Entity;
				if (((previousValue != value) 
							|| (this._ACADEMIC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ACADEMIC.Entity = null;
						previousValue.EMPLOYEEs.Remove(this);
					}
					this._ACADEMIC.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEEs.Add(this);
						this._AcademicId = value.Id;
					}
					else
					{
						this._AcademicId = default(short);
					}
					this.SendPropertyChanged("ACADEMIC");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BRANCH_EMPLOYEE", Storage="_BRANCH", ThisKey="BranchId", OtherKey="Id", IsForeignKey=true)]
		public BRANCH BRANCH
		{
			get
			{
				return this._BRANCH.Entity;
			}
			set
			{
				BRANCH previousValue = this._BRANCH.Entity;
				if (((previousValue != value) 
							|| (this._BRANCH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BRANCH.Entity = null;
						previousValue.EMPLOYEEs.Remove(this);
					}
					this._BRANCH.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEEs.Add(this);
						this._BranchId = value.Id;
					}
					else
					{
						this._BranchId = default(Nullable<short>);
					}
					this.SendPropertyChanged("BRANCH");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CITY_EMPLOYEE", Storage="_CITY", ThisKey="CityId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CITY CITY
		{
			get
			{
				return this._CITY.Entity;
			}
			set
			{
				CITY previousValue = this._CITY.Entity;
				if (((previousValue != value) 
							|| (this._CITY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CITY.Entity = null;
						previousValue.EMPLOYEEs.Remove(this);
					}
					this._CITY.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEEs.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(short);
					}
					this.SendPropertyChanged("CITY");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DEPARTMENT_EMPLOYEE", Storage="_DEPARTMENT", ThisKey="DepartmentId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DEPARTMENT DEPARTMENT
		{
			get
			{
				return this._DEPARTMENT.Entity;
			}
			set
			{
				DEPARTMENT previousValue = this._DEPARTMENT.Entity;
				if (((previousValue != value) 
							|| (this._DEPARTMENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DEPARTMENT.Entity = null;
						previousValue.EMPLOYEEs.Remove(this);
					}
					this._DEPARTMENT.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEEs.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(short);
					}
					this.SendPropertyChanged("DEPARTMENT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DISTRICT_EMPLOYEE", Storage="_DISTRICT", ThisKey="DistrictId", OtherKey="Id", IsForeignKey=true)]
		public DISTRICT DISTRICT
		{
			get
			{
				return this._DISTRICT.Entity;
			}
			set
			{
				DISTRICT previousValue = this._DISTRICT.Entity;
				if (((previousValue != value) 
							|| (this._DISTRICT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DISTRICT.Entity = null;
						previousValue.EMPLOYEEs.Remove(this);
					}
					this._DISTRICT.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEEs.Add(this);
						this._DistrictId = value.Id;
					}
					else
					{
						this._DistrictId = default(short);
					}
					this.SendPropertyChanged("DISTRICT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WARD_EMPLOYEE", Storage="_WARD", ThisKey="WardId", OtherKey="Id", IsForeignKey=true)]
		public WARD WARD
		{
			get
			{
				return this._WARD.Entity;
			}
			set
			{
				WARD previousValue = this._WARD.Entity;
				if (((previousValue != value) 
							|| (this._WARD.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WARD.Entity = null;
						previousValue.EMPLOYEEs.Remove(this);
					}
					this._WARD.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEEs.Add(this);
						this._WardId = value.Id;
					}
					else
					{
						this._WardId = default(Nullable<short>);
					}
					this.SendPropertyChanged("WARD");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STREET_EMPLOYEE", Storage="_STREET", ThisKey="StreetId", OtherKey="Id", IsForeignKey=true)]
		public STREET STREET
		{
			get
			{
				return this._STREET.Entity;
			}
			set
			{
				STREET previousValue = this._STREET.Entity;
				if (((previousValue != value) 
							|| (this._STREET.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STREET.Entity = null;
						previousValue.EMPLOYEEs.Remove(this);
					}
					this._STREET.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEEs.Add(this);
						this._StreetId = value.Id;
					}
					else
					{
						this._StreetId = default(Nullable<short>);
					}
					this.SendPropertyChanged("STREET");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TREATMENTDETAILs(TREATMENTDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = this;
		}
		
		private void detach_TREATMENTDETAILs(TREATMENTDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = null;
		}
		
		private void attach_TREATMENTDETAILs1(TREATMENTDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE1 = this;
		}
		
		private void detach_TREATMENTDETAILs1(TREATMENTDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE1 = null;
		}
		
		private void attach_USERs(USER entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = this;
		}
		
		private void detach_USERs(USER entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[GROUP]")]
	public partial class GROUP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private string _Detail;
		
		private EntitySet<GROUP_DETAIL> _GROUP_DETAILs;
		
		private EntitySet<USER> _USERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    #endregion
		
		public GROUP()
		{
			this._GROUP_DETAILs = new EntitySet<GROUP_DETAIL>(new Action<GROUP_DETAIL>(this.attach_GROUP_DETAILs), new Action<GROUP_DETAIL>(this.detach_GROUP_DETAILs));
			this._USERs = new EntitySet<USER>(new Action<USER>(this.attach_USERs), new Action<USER>(this.detach_USERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="NVarChar(MAX)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GROUP_GROUP_DETAIL", Storage="_GROUP_DETAILs", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<GROUP_DETAIL> GROUP_DETAILs
		{
			get
			{
				return this._GROUP_DETAILs;
			}
			set
			{
				this._GROUP_DETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GROUP_USER", Storage="_USERs", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<USER> USERs
		{
			get
			{
				return this._USERs;
			}
			set
			{
				this._USERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GROUP_DETAILs(GROUP_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.GROUP = this;
		}
		
		private void detach_GROUP_DETAILs(GROUP_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.GROUP = null;
		}
		
		private void attach_USERs(USER entity)
		{
			this.SendPropertyChanging();
			entity.GROUP = this;
		}
		
		private void detach_USERs(USER entity)
		{
			this.SendPropertyChanging();
			entity.GROUP = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GROUP_DETAIL")]
	public partial class GROUP_DETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private short _GroupId;
		
		private short _RuleId;
		
		private EntityRef<GROUP> _GROUP;
		
		private EntityRef<RULE> _RULE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnGroupIdChanging(short value);
    partial void OnGroupIdChanged();
    partial void OnRuleIdChanging(short value);
    partial void OnRuleIdChanged();
    #endregion
		
		public GROUP_DETAIL()
		{
			this._GROUP = default(EntityRef<GROUP>);
			this._RULE = default(EntityRef<RULE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="SmallInt NOT NULL")]
		public short GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._GROUP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleId", DbType="SmallInt NOT NULL")]
		public short RuleId
		{
			get
			{
				return this._RuleId;
			}
			set
			{
				if ((this._RuleId != value))
				{
					if (this._RULE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRuleIdChanging(value);
					this.SendPropertyChanging();
					this._RuleId = value;
					this.SendPropertyChanged("RuleId");
					this.OnRuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GROUP_GROUP_DETAIL", Storage="_GROUP", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GROUP GROUP
		{
			get
			{
				return this._GROUP.Entity;
			}
			set
			{
				GROUP previousValue = this._GROUP.Entity;
				if (((previousValue != value) 
							|| (this._GROUP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GROUP.Entity = null;
						previousValue.GROUP_DETAILs.Remove(this);
					}
					this._GROUP.Entity = value;
					if ((value != null))
					{
						value.GROUP_DETAILs.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(short);
					}
					this.SendPropertyChanged("GROUP");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RULE_GROUP_DETAIL", Storage="_RULE", ThisKey="RuleId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RULE RULE
		{
			get
			{
				return this._RULE.Entity;
			}
			set
			{
				RULE previousValue = this._RULE.Entity;
				if (((previousValue != value) 
							|| (this._RULE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RULE.Entity = null;
						previousValue.GROUP_DETAILs.Remove(this);
					}
					this._RULE.Entity = value;
					if ((value != null))
					{
						value.GROUP_DETAILs.Add(this);
						this._RuleId = value.Id;
					}
					else
					{
						this._RuleId = default(short);
					}
					this.SendPropertyChanged("RULE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JOB")]
	public partial class JOB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private string _Detail;
		
		private EntitySet<CUSTOMER> _CUSTOMERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    #endregion
		
		public JOB()
		{
			this._CUSTOMERs = new EntitySet<CUSTOMER>(new Action<CUSTOMER>(this.attach_CUSTOMERs), new Action<CUSTOMER>(this.detach_CUSTOMERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="NVarChar(MAX)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JOB_CUSTOMER", Storage="_CUSTOMERs", ThisKey="Id", OtherKey="JobId")]
		public EntitySet<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this._CUSTOMERs;
			}
			set
			{
				this._CUSTOMERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.JOB = this;
		}
		
		private void detach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.JOB = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KNOWREASON")]
	public partial class KNOWREASON : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private string _Detail;
		
		private EntitySet<KNOWREASON_DETAIL> _KNOWREASON_DETAILs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    #endregion
		
		public KNOWREASON()
		{
			this._KNOWREASON_DETAILs = new EntitySet<KNOWREASON_DETAIL>(new Action<KNOWREASON_DETAIL>(this.attach_KNOWREASON_DETAILs), new Action<KNOWREASON_DETAIL>(this.detach_KNOWREASON_DETAILs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="NVarChar(MAX)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KNOWREASON_KNOWREASON_DETAIL", Storage="_KNOWREASON_DETAILs", ThisKey="Id", OtherKey="KnowReasonId")]
		public EntitySet<KNOWREASON_DETAIL> KNOWREASON_DETAILs
		{
			get
			{
				return this._KNOWREASON_DETAILs;
			}
			set
			{
				this._KNOWREASON_DETAILs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_KNOWREASON_DETAILs(KNOWREASON_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.KNOWREASON = this;
		}
		
		private void detach_KNOWREASON_DETAILs(KNOWREASON_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.KNOWREASON = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KNOWREASON_DETAIL")]
	public partial class KNOWREASON_DETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CustomerId;
		
		private short _KnowReasonId;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
		private EntityRef<KNOWREASON> _KNOWREASON;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCustomerIdChanging(string value);
    partial void OnCustomerIdChanged();
    partial void OnKnowReasonIdChanging(short value);
    partial void OnKnowReasonIdChanged();
    #endregion
		
		public KNOWREASON_DETAIL()
		{
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			this._KNOWREASON = default(EntityRef<KNOWREASON>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Char(12) NOT NULL", CanBeNull=false)]
		public string CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowReasonId", DbType="SmallInt NOT NULL")]
		public short KnowReasonId
		{
			get
			{
				return this._KnowReasonId;
			}
			set
			{
				if ((this._KnowReasonId != value))
				{
					if (this._KNOWREASON.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKnowReasonIdChanging(value);
					this.SendPropertyChanging();
					this._KnowReasonId = value;
					this.SendPropertyChanged("KnowReasonId");
					this.OnKnowReasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_KNOWREASON_DETAIL", Storage="_CUSTOMER", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.KNOWREASON_DETAILs.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.KNOWREASON_DETAILs.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(string);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KNOWREASON_KNOWREASON_DETAIL", Storage="_KNOWREASON", ThisKey="KnowReasonId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public KNOWREASON KNOWREASON
		{
			get
			{
				return this._KNOWREASON.Entity;
			}
			set
			{
				KNOWREASON previousValue = this._KNOWREASON.Entity;
				if (((previousValue != value) 
							|| (this._KNOWREASON.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KNOWREASON.Entity = null;
						previousValue.KNOWREASON_DETAILs.Remove(this);
					}
					this._KNOWREASON.Entity = value;
					if ((value != null))
					{
						value.KNOWREASON_DETAILs.Add(this);
						this._KnowReasonId = value.Id;
					}
					else
					{
						this._KnowReasonId = default(short);
					}
					this.SendPropertyChanged("KNOWREASON");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[RULE]")]
	public partial class RULE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private string _Detail;
		
		private EntitySet<GROUP_DETAIL> _GROUP_DETAILs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    #endregion
		
		public RULE()
		{
			this._GROUP_DETAILs = new EntitySet<GROUP_DETAIL>(new Action<GROUP_DETAIL>(this.attach_GROUP_DETAILs), new Action<GROUP_DETAIL>(this.detach_GROUP_DETAILs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="NVarChar(MAX)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RULE_GROUP_DETAIL", Storage="_GROUP_DETAILs", ThisKey="Id", OtherKey="RuleId")]
		public EntitySet<GROUP_DETAIL> GROUP_DETAILs
		{
			get
			{
				return this._GROUP_DETAILs;
			}
			set
			{
				this._GROUP_DETAILs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GROUP_DETAILs(GROUP_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.RULE = this;
		}
		
		private void detach_GROUP_DETAILs(GROUP_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.RULE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STREET")]
	public partial class STREET : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private EntitySet<BRANCH> _BRANCHes;
		
		private EntitySet<CUSTOMER> _CUSTOMERs;
		
		private EntitySet<DISTRICT_DETAIL> _DISTRICT_DETAILs;
		
		private EntitySet<EMPLOYEE> _EMPLOYEEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public STREET()
		{
			this._BRANCHes = new EntitySet<BRANCH>(new Action<BRANCH>(this.attach_BRANCHes), new Action<BRANCH>(this.detach_BRANCHes));
			this._CUSTOMERs = new EntitySet<CUSTOMER>(new Action<CUSTOMER>(this.attach_CUSTOMERs), new Action<CUSTOMER>(this.detach_CUSTOMERs));
			this._DISTRICT_DETAILs = new EntitySet<DISTRICT_DETAIL>(new Action<DISTRICT_DETAIL>(this.attach_DISTRICT_DETAILs), new Action<DISTRICT_DETAIL>(this.detach_DISTRICT_DETAILs));
			this._EMPLOYEEs = new EntitySet<EMPLOYEE>(new Action<EMPLOYEE>(this.attach_EMPLOYEEs), new Action<EMPLOYEE>(this.detach_EMPLOYEEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STREET_BRANCH", Storage="_BRANCHes", ThisKey="Id", OtherKey="StreetId")]
		public EntitySet<BRANCH> BRANCHes
		{
			get
			{
				return this._BRANCHes;
			}
			set
			{
				this._BRANCHes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STREET_CUSTOMER", Storage="_CUSTOMERs", ThisKey="Id", OtherKey="StreetId")]
		public EntitySet<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this._CUSTOMERs;
			}
			set
			{
				this._CUSTOMERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STREET_DISTRICT_DETAIL", Storage="_DISTRICT_DETAILs", ThisKey="Id", OtherKey="StreetId")]
		public EntitySet<DISTRICT_DETAIL> DISTRICT_DETAILs
		{
			get
			{
				return this._DISTRICT_DETAILs;
			}
			set
			{
				this._DISTRICT_DETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STREET_EMPLOYEE", Storage="_EMPLOYEEs", ThisKey="Id", OtherKey="StreetId")]
		public EntitySet<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this._EMPLOYEEs;
			}
			set
			{
				this._EMPLOYEEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BRANCHes(BRANCH entity)
		{
			this.SendPropertyChanging();
			entity.STREET = this;
		}
		
		private void detach_BRANCHes(BRANCH entity)
		{
			this.SendPropertyChanging();
			entity.STREET = null;
		}
		
		private void attach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.STREET = this;
		}
		
		private void detach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.STREET = null;
		}
		
		private void attach_DISTRICT_DETAILs(DISTRICT_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.STREET = this;
		}
		
		private void detach_DISTRICT_DETAILs(DISTRICT_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.STREET = null;
		}
		
		private void attach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.STREET = this;
		}
		
		private void detach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.STREET = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TREATMENTDETAIL")]
	public partial class TREATMENTDETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Teeth;
		
		private string _Treatment;
		
		private System.Nullable<decimal> _Cost;
		
		private System.Nullable<decimal> _Payment;
		
		private System.Nullable<short> _ExamTime;
		
		private string _CustomerId;
		
		private int _ReceptionistId;
		
		private System.Nullable<int> _DoctorId;
		
		private System.Nullable<System.DateTime> _AppointmentDate;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
		private EntityRef<EMPLOYEE> _EMPLOYEE;
		
		private EntityRef<EMPLOYEE> _EMPLOYEE1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTeethChanging(string value);
    partial void OnTeethChanged();
    partial void OnTreatmentChanging(string value);
    partial void OnTreatmentChanged();
    partial void OnCostChanging(System.Nullable<decimal> value);
    partial void OnCostChanged();
    partial void OnPaymentChanging(System.Nullable<decimal> value);
    partial void OnPaymentChanged();
    partial void OnExamTimeChanging(System.Nullable<short> value);
    partial void OnExamTimeChanged();
    partial void OnCustomerIdChanging(string value);
    partial void OnCustomerIdChanged();
    partial void OnReceptionistIdChanging(int value);
    partial void OnReceptionistIdChanged();
    partial void OnDoctorIdChanging(System.Nullable<int> value);
    partial void OnDoctorIdChanged();
    partial void OnAppointmentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAppointmentDateChanged();
    #endregion
		
		public TREATMENTDETAIL()
		{
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			this._EMPLOYEE = default(EntityRef<EMPLOYEE>);
			this._EMPLOYEE1 = default(EntityRef<EMPLOYEE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Teeth", DbType="VarChar(50)")]
		public string Teeth
		{
			get
			{
				return this._Teeth;
			}
			set
			{
				if ((this._Teeth != value))
				{
					this.OnTeethChanging(value);
					this.SendPropertyChanging();
					this._Teeth = value;
					this.SendPropertyChanged("Teeth");
					this.OnTeethChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Treatment", DbType="NVarChar(MAX)")]
		public string Treatment
		{
			get
			{
				return this._Treatment;
			}
			set
			{
				if ((this._Treatment != value))
				{
					this.OnTreatmentChanging(value);
					this.SendPropertyChanging();
					this._Treatment = value;
					this.SendPropertyChanged("Treatment");
					this.OnTreatmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Money")]
		public System.Nullable<decimal> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment", DbType="Money")]
		public System.Nullable<decimal> Payment
		{
			get
			{
				return this._Payment;
			}
			set
			{
				if ((this._Payment != value))
				{
					this.OnPaymentChanging(value);
					this.SendPropertyChanging();
					this._Payment = value;
					this.SendPropertyChanged("Payment");
					this.OnPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamTime", DbType="SmallInt")]
		public System.Nullable<short> ExamTime
		{
			get
			{
				return this._ExamTime;
			}
			set
			{
				if ((this._ExamTime != value))
				{
					this.OnExamTimeChanging(value);
					this.SendPropertyChanging();
					this._ExamTime = value;
					this.SendPropertyChanged("ExamTime");
					this.OnExamTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Char(12) NOT NULL", CanBeNull=false)]
		public string CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceptionistId", DbType="Int NOT NULL")]
		public int ReceptionistId
		{
			get
			{
				return this._ReceptionistId;
			}
			set
			{
				if ((this._ReceptionistId != value))
				{
					if (this._EMPLOYEE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceptionistIdChanging(value);
					this.SendPropertyChanging();
					this._ReceptionistId = value;
					this.SendPropertyChanged("ReceptionistId");
					this.OnReceptionistIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorId", DbType="Int")]
		public System.Nullable<int> DoctorId
		{
			get
			{
				return this._DoctorId;
			}
			set
			{
				if ((this._DoctorId != value))
				{
					if (this._EMPLOYEE1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIdChanging(value);
					this.SendPropertyChanging();
					this._DoctorId = value;
					this.SendPropertyChanged("DoctorId");
					this.OnDoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> AppointmentDate
		{
			get
			{
				return this._AppointmentDate;
			}
			set
			{
				if ((this._AppointmentDate != value))
				{
					this.OnAppointmentDateChanging(value);
					this.SendPropertyChanging();
					this._AppointmentDate = value;
					this.SendPropertyChanged("AppointmentDate");
					this.OnAppointmentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_TREATMENTDETAIL", Storage="_CUSTOMER", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.TREATMENTDETAILs.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.TREATMENTDETAILs.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(string);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_TREATMENTDETAIL", Storage="_EMPLOYEE", ThisKey="ReceptionistId", OtherKey="Id", IsForeignKey=true)]
		public EMPLOYEE EMPLOYEE
		{
			get
			{
				return this._EMPLOYEE.Entity;
			}
			set
			{
				EMPLOYEE previousValue = this._EMPLOYEE.Entity;
				if (((previousValue != value) 
							|| (this._EMPLOYEE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EMPLOYEE.Entity = null;
						previousValue.TREATMENTDETAILs.Remove(this);
					}
					this._EMPLOYEE.Entity = value;
					if ((value != null))
					{
						value.TREATMENTDETAILs.Add(this);
						this._ReceptionistId = value.Id;
					}
					else
					{
						this._ReceptionistId = default(int);
					}
					this.SendPropertyChanged("EMPLOYEE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_TREATMENTDETAIL1", Storage="_EMPLOYEE1", ThisKey="DoctorId", OtherKey="Id", IsForeignKey=true)]
		public EMPLOYEE EMPLOYEE1
		{
			get
			{
				return this._EMPLOYEE1.Entity;
			}
			set
			{
				EMPLOYEE previousValue = this._EMPLOYEE1.Entity;
				if (((previousValue != value) 
							|| (this._EMPLOYEE1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EMPLOYEE1.Entity = null;
						previousValue.TREATMENTDETAILs1.Remove(this);
					}
					this._EMPLOYEE1.Entity = value;
					if ((value != null))
					{
						value.TREATMENTDETAILs1.Add(this);
						this._DoctorId = value.Id;
					}
					else
					{
						this._DoctorId = default(Nullable<int>);
					}
					this.SendPropertyChanged("EMPLOYEE1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TREATMENTPLAN")]
	public partial class TREATMENTPLAN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Id;
		
		private string _Name;
		
		private string _Detail;
		
		private EntitySet<TREATMENTPLAN_DETAIL> _TREATMENTPLAN_DETAILs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(short value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    #endregion
		
		public TREATMENTPLAN()
		{
			this._TREATMENTPLAN_DETAILs = new EntitySet<TREATMENTPLAN_DETAIL>(new Action<TREATMENTPLAN_DETAIL>(this.attach_TREATMENTPLAN_DETAILs), new Action<TREATMENTPLAN_DETAIL>(this.detach_TREATMENTPLAN_DETAILs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="NVarChar(MAX)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TREATMENTPLAN_TREATMENTPLAN_DETAIL", Storage="_TREATMENTPLAN_DETAILs", ThisKey="Id", OtherKey="PlanId")]
		public EntitySet<TREATMENTPLAN_DETAIL> TREATMENTPLAN_DETAILs
		{
			get
			{
				return this._TREATMENTPLAN_DETAILs;
			}
			set
			{
				this._TREATMENTPLAN_DETAILs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TREATMENTPLAN_DETAILs(TREATMENTPLAN_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.TREATMENTPLAN = this;
		}
		
		private void detach_TREATMENTPLAN_DETAILs(TREATMENTPLAN_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.TREATMENTPLAN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TREATMENTPLAN_DETAIL")]
	public partial class TREATMENTPLAN_DETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ProfileId;
		
		private short _PlanId;
		
		private EntityRef<TREATMENTPLAN> _TREATMENTPLAN;
		
		private EntityRef<TREATMENTPROFILE> _TREATMENTPROFILE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProfileIdChanging(string value);
    partial void OnProfileIdChanged();
    partial void OnPlanIdChanging(short value);
    partial void OnPlanIdChanged();
    #endregion
		
		public TREATMENTPLAN_DETAIL()
		{
			this._TREATMENTPLAN = default(EntityRef<TREATMENTPLAN>);
			this._TREATMENTPROFILE = default(EntityRef<TREATMENTPROFILE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileId", DbType="Char(12) NOT NULL", CanBeNull=false)]
		public string ProfileId
		{
			get
			{
				return this._ProfileId;
			}
			set
			{
				if ((this._ProfileId != value))
				{
					if (this._TREATMENTPROFILE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfileIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileId = value;
					this.SendPropertyChanged("ProfileId");
					this.OnProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanId", DbType="SmallInt NOT NULL")]
		public short PlanId
		{
			get
			{
				return this._PlanId;
			}
			set
			{
				if ((this._PlanId != value))
				{
					if (this._TREATMENTPLAN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanIdChanging(value);
					this.SendPropertyChanging();
					this._PlanId = value;
					this.SendPropertyChanged("PlanId");
					this.OnPlanIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TREATMENTPLAN_TREATMENTPLAN_DETAIL", Storage="_TREATMENTPLAN", ThisKey="PlanId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TREATMENTPLAN TREATMENTPLAN
		{
			get
			{
				return this._TREATMENTPLAN.Entity;
			}
			set
			{
				TREATMENTPLAN previousValue = this._TREATMENTPLAN.Entity;
				if (((previousValue != value) 
							|| (this._TREATMENTPLAN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TREATMENTPLAN.Entity = null;
						previousValue.TREATMENTPLAN_DETAILs.Remove(this);
					}
					this._TREATMENTPLAN.Entity = value;
					if ((value != null))
					{
						value.TREATMENTPLAN_DETAILs.Add(this);
						this._PlanId = value.Id;
					}
					else
					{
						this._PlanId = default(short);
					}
					this.SendPropertyChanged("TREATMENTPLAN");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TREATMENTPROFILE_TREATMENTPLAN_DETAIL", Storage="_TREATMENTPROFILE", ThisKey="ProfileId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TREATMENTPROFILE TREATMENTPROFILE
		{
			get
			{
				return this._TREATMENTPROFILE.Entity;
			}
			set
			{
				TREATMENTPROFILE previousValue = this._TREATMENTPROFILE.Entity;
				if (((previousValue != value) 
							|| (this._TREATMENTPROFILE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TREATMENTPROFILE.Entity = null;
						previousValue.TREATMENTPLAN_DETAILs.Remove(this);
					}
					this._TREATMENTPROFILE.Entity = value;
					if ((value != null))
					{
						value.TREATMENTPLAN_DETAILs.Add(this);
						this._ProfileId = value.Id;
					}
					else
					{
						this._ProfileId = default(string);
					}
					this.SendPropertyChanged("TREATMENTPROFILE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TREATMENTPROFILE")]
	public partial class TREATMENTPROFILE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Reason;
		
		private string _Request;
		
		private string _Teeth;
		
		private System.Nullable<bool> _IsPanorex;
		
		private System.Nullable<bool> _IsPhin;
		
		private string _CustomerId;
		
		private EntitySet<TREATMENTPLAN_DETAIL> _TREATMENTPLAN_DETAILs;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnRequestChanging(string value);
    partial void OnRequestChanged();
    partial void OnTeethChanging(string value);
    partial void OnTeethChanged();
    partial void OnIsPanorexChanging(System.Nullable<bool> value);
    partial void OnIsPanorexChanged();
    partial void OnIsPhinChanging(System.Nullable<bool> value);
    partial void OnIsPhinChanged();
    partial void OnCustomerIdChanging(string value);
    partial void OnCustomerIdChanged();
    #endregion
		
		public TREATMENTPROFILE()
		{
			this._TREATMENTPLAN_DETAILs = new EntitySet<TREATMENTPLAN_DETAIL>(new Action<TREATMENTPLAN_DETAIL>(this.attach_TREATMENTPLAN_DETAILs), new Action<TREATMENTPLAN_DETAIL>(this.detach_TREATMENTPLAN_DETAILs));
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Char(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="NVarChar(MAX)")]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Request", DbType="NVarChar(MAX)")]
		public string Request
		{
			get
			{
				return this._Request;
			}
			set
			{
				if ((this._Request != value))
				{
					this.OnRequestChanging(value);
					this.SendPropertyChanging();
					this._Request = value;
					this.SendPropertyChanged("Request");
					this.OnRequestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Teeth", DbType="VarChar(50)")]
		public string Teeth
		{
			get
			{
				return this._Teeth;
			}
			set
			{
				if ((this._Teeth != value))
				{
					this.OnTeethChanging(value);
					this.SendPropertyChanging();
					this._Teeth = value;
					this.SendPropertyChanged("Teeth");
					this.OnTeethChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPanorex", DbType="Bit")]
		public System.Nullable<bool> IsPanorex
		{
			get
			{
				return this._IsPanorex;
			}
			set
			{
				if ((this._IsPanorex != value))
				{
					this.OnIsPanorexChanging(value);
					this.SendPropertyChanging();
					this._IsPanorex = value;
					this.SendPropertyChanged("IsPanorex");
					this.OnIsPanorexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPhin", DbType="Bit")]
		public System.Nullable<bool> IsPhin
		{
			get
			{
				return this._IsPhin;
			}
			set
			{
				if ((this._IsPhin != value))
				{
					this.OnIsPhinChanging(value);
					this.SendPropertyChanging();
					this._IsPhin = value;
					this.SendPropertyChanged("IsPhin");
					this.OnIsPhinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Char(12) NOT NULL", CanBeNull=false)]
		public string CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TREATMENTPROFILE_TREATMENTPLAN_DETAIL", Storage="_TREATMENTPLAN_DETAILs", ThisKey="Id", OtherKey="ProfileId")]
		public EntitySet<TREATMENTPLAN_DETAIL> TREATMENTPLAN_DETAILs
		{
			get
			{
				return this._TREATMENTPLAN_DETAILs;
			}
			set
			{
				this._TREATMENTPLAN_DETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_TREATMENTPROFILE", Storage="_CUSTOMER", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.TREATMENTPROFILEs.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.TREATMENTPROFILEs.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(string);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TREATMENTPLAN_DETAILs(TREATMENTPLAN_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.TREATMENTPROFILE = this;
		}
		
		private void detach_TREATMENTPLAN_DETAILs(TREATMENTPLAN_DETAIL entity)
		{
			this.SendPropertyChanging();
			entity.TREATMENTPROFILE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[USER]")]
	public partial class USER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Username;
		
		private string _Password;
		
		private string _Phone;
		
		private string _Email;
		
		private int _EmployeeId;
		
		private short _GroupId;
		
		private EntityRef<EMPLOYEE> _EMPLOYEE;
		
		private EntityRef<GROUP> _GROUP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnGroupIdChanging(short value);
    partial void OnGroupIdChanged();
    #endregion
		
		public USER()
		{
			this._EMPLOYEE = default(EntityRef<EMPLOYEE>);
			this._GROUP = default(EntityRef<GROUP>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(70)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(70)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL")]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._EMPLOYEE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="SmallInt NOT NULL")]
		public short GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._GROUP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_USER", Storage="_EMPLOYEE", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EMPLOYEE EMPLOYEE
		{
			get
			{
				return this._EMPLOYEE.Entity;
			}
			set
			{
				EMPLOYEE previousValue = this._EMPLOYEE.Entity;
				if (((previousValue != value) 
							|| (this._EMPLOYEE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EMPLOYEE.Entity = null;
						previousValue.USERs.Remove(this);
					}
					this._EMPLOYEE.Entity = value;
					if ((value != null))
					{
						value.USERs.Add(this);
						this._EmployeeId = value.Id;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("EMPLOYEE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GROUP_USER", Storage="_GROUP", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GROUP GROUP
		{
			get
			{
				return this._GROUP.Entity;
			}
			set
			{
				GROUP previousValue = this._GROUP.Entity;
				if (((previousValue != value) 
							|| (this._GROUP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GROUP.Entity = null;
						previousValue.USERs.Remove(this);
					}
					this._GROUP.Entity = value;
					if ((value != null))
					{
						value.USERs.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(short);
					}
					this.SendPropertyChanged("GROUP");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
